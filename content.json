{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://huongvnq.github.io","root":"/"},"pages":[{"title":"Categories","date":"2021-07-18T01:49:17.000Z","updated":"2021-07-18T02:36:42.989Z","comments":true,"path":"categories/index.html","permalink":"https://huongvnq.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-07-18T02:02:02.000Z","updated":"2021-07-18T08:59:38.632Z","comments":true,"path":"tags/index.html","permalink":"https://huongvnq.github.io/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2021-07-18T02:39:35.000Z","updated":"2021-07-18T03:26:04.375Z","comments":false,"path":"about/index.html","permalink":"https://huongvnq.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Create A New Module In Magento2","slug":"create-a-new-module-in-magento2","date":"2021-07-18T03:55:23.000Z","updated":"2021-07-18T04:05:47.418Z","comments":false,"path":"2021/07/18/create-a-new-module-in-magento2/","link":"","permalink":"https://huongvnq.github.io/2021/07/18/create-a-new-module-in-magento2/","excerpt":"","text":"1.Tổng quát Module là một đơn vị cấu trúc của Magento. Toàn bộ hệ thống sẽ được xây dựng dựa trên các Module. Thông thường, bước đầu tiên để custom core của mangeto cũng là tạo module. Để tạo một module, chúng ta phải thực hiện các bước sau: Tạo một thư mục module Tạo file etc/module.xml Tạo file registration.php Chạy script bin/magento setup:upgrade để install module mới Kiểm tra module được active hay chưa. chúng ta hãy cùng đi vào cụ thể từng bước nhé. 2. Tạo thư mục cho module Chúng ta có 2 nơi để tạo thư mục cho module. Đó là trong folder app/code và trong folder vendor. Tuỳ thuộc vào cách cài đặt Magento2, những module core của magento có thể được đặt trong các thư mục vendor/magento/magento-* (trường hợp dùng composer để install) hoặc app/code/Magento/ (trường hợp clone Github) Vậy chúng ta nên đặt module mới ở đâu? Nếu chúng ta build một module cho một project cụ thể, chúng ta sẽ tạo mới module ở trong thư mục app/code và commit lên repository của product trên Github. Nếu chúng ta xây dựng một extension để tái sử dụng, chúng ta sẽ dùng composer để tạo nó và chúng ta sẽ đặt module ở trong vendor/&lt;YOUR_VENDOR&gt;/module-something Tên của module trong magento2 sẽ bao gồm 2 phần: tên vendor và tên của chính module đó. Nói cách khác, module sẽ được nhóm lại thành 1 vendor do vậy khi đặt tên của module ta phải chỉ định cả tên vendor đó. Trong ví dụ này chúng ta sẽ tạo một vendor là Learning và một module là First Unit cd to folder root mkdir app/code/Learning mkdir app/code/Learning/FirstUnit3. Tạo file etc/module.xml Trước tiên chúng ta phải đảm bảo rằng chúng ta có quyền để tạo file và folder trong folder root nhé. Nếu đã có quyền, chúng ta tạo một file etc/module.xml. Phải có file này thì module mới tồn tại được. File module.xml chứa các thông tin sau Module name Module version Dependencies Module name đã được định nghĩa bằng tên thư mục mà chúng ta vừa tạo. Trong Magento2, tất cả các class name phải tuân theo cấu trúc thư mục. Bởi vì chúng ta tạo thư mục là Learning/FirstUnit nên module name của chúng ta sẽ là Learning_FirstUnit. Tất cả các class thuộc module này sẽ là bắt đầu với Learning/FirstUnit Ví dụ Learning\\FirstUnit\\Observer\\Test Tiếp theo đến Module version. Module version cho biết được phiên bản hiện tại của database schema và data, được sử dụng cho việc upgrade module. Ví dụ như giả định bạn muốn thay đổi cấu trúc bảng dữ liệu (database table schema) của module này. Làm thế nào để bạn đảm bảo rằng thay đổi này sẽ được áp dụng trên tất cả các phiên bản mã code đã được deploy rồi. Magento sẽ có các script install và upgrade cho mỗi module (Hoặc bạn tự tạo). Các file script này sẽ có các command để thay đổi database schema và data. Để theo dõi xem liệu đã thực thi phần lệnh trong script hay chưa, magento sẽ track dựa vào module version. Mỗi lần bạn thực thi thay đổi mới trong database, bạn sẽ phải thực thi với version mới của module và tăng version của module lên tương ứng trong file module.xml. Magento sẽ lưu phiên bản hiện tại của module trong database. Nếu giá trị trong database và trong file module.xml không khớp với nhau, nó sẽ thực thi upgrade code. Dependencies: Nếu một module phụ thuộc vào một module khác thì chúng ta phải khai báo trong file modules.xml danh sách các module mà module hiện tại của chúng ta đang phụ thuộc vào. Ví dụ, module này chúng ta tạo ra sẽ phụ thuộc vào module Magento_Catalog. Đầu tiên chúng ta tạo folder etc:mkdir app/code/Learning/FirstUnit/etc Tạo file module.xmll 12345678&lt;?xml version=&quot;1.0&quot;?&gt;&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Module/etc/module.xsd&quot;&gt; &lt;module name=&quot;Learning_FirstUnit&quot; setup_version=&quot;0.0.1&quot;&gt; &lt;sequence&gt; &lt;module name=&quot;Magento_Catalog&quot;/&gt; &lt;/sequence&gt; &lt;/module&gt;&lt;/config&gt; Trong file module mà chúng ta vừa tạo, chúng ta đã chỉ định: Module name: Learning_FirstUnit dựa trên folder mà chúng ta đã tạo. Versionn: 0.0.1 (Version khởi tạo của module) Dependency: Magento_Catalog. Chúng ta có thể có nhiều Dependency, khi ấy chúng ta hãy liệt kê bằng các thẻ &lt;module name=&quot;...&quot; /&gt; ở bên trong thẻ &lt;sequence&gt;4. Tạo file registration.php Mỗi module sẽ phải có file này để đăng kí cho magento biết vị trí của module. Tiếp tục example, chúng ta sẽ tạo file app/code/Learning/FirstUnit/registration.php 1234&lt;?php \\Magento\\Framework\\Component\\ComponentRegistrar::register(\\Magento\\Framework\\Component\\ComponentRegistrar::MODULE, &#x27;Learning_FirstUnit&#x27;,__DIR__); File registrationn.phpp sẽ giống nhau đối với tất cả các module, chỉ khác tên của module, ở đây của chúng ta là Learning_FirstUnit 5. Chạy command Tạo xong module chúng ta phải chạy command để active module, để thông báo cho magento biết về sự hiện diện của nó. 1$ php bin/magento setup:upgrade Câu lệnh sẽ cho ra rất nhiều dòng input, hãy check xem một trong các dòng đó có Learning_FirstUnit hay không. 6 Check module is active Mặc dù chúng ta chưa add những logic code vào module, trong ví dụ này chúng ta chỉ thực hiện tạo module, module hiện taị đang trống và không thể nhìn thấy được. Để kiểm tra module đã được nhận hay chưa, chúng ta hãy kiểm tra file app/etc/config.php, file này chứa tất cả các module đã được active. Chúng cũng không được thay đổi file này một cách thủ công. Check module is active 1$ grep Learning_FirstUnit app/etc/config.php 7. Kết luận. Lại là một bài viết đơn giản siêu siêu beginer cho các bạn mới mày mò tìm hiểu magento, thực hiện các bước trong bài viết, các bạn đã có thể tạo cho mình một module để bắt đầu có thể add những logic phực tạp hơn cho module trong magento. Mong bài viết sẽ có ích đối với các bạn và hãy đón chờ các bài viết tiếp theo của mình trong serries về Magento nhé. Ciao! Bài viết tham khảo https://devdocs.magento.com/videos/fundamentals/create-a-new-module/","categories":[{"name":"Magento","slug":"Magento","permalink":"https://huongvnq.github.io/categories/Magento/"}],"tags":[{"name":"magento basic","slug":"magento-basic","permalink":"https://huongvnq.github.io/tags/magento-basic/"}]},{"title":"Create A New Page In Magento2","slug":"create-a-new-page-in-magento2","date":"2021-07-17T07:06:27.037Z","updated":"2021-07-18T03:55:41.659Z","comments":false,"path":"2021/07/17/create-a-new-page-in-magento2/","link":"","permalink":"https://huongvnq.github.io/2021/07/17/create-a-new-page-in-magento2/","excerpt":"","text":"1. Tổng quan Mở đầu series chia sẻ về Magento lần này, mình sẽ trình bày cách tạo một page mới trong magnento. Chúng ta sẽ cùng tạo một page mới trả về JSON với một tham số “HELLO WORLD!” nhé. :D Để thêm một page mới trong magento2, chúng ta phải tạo một controller. Trong Magento2, một controller là một file được đặt ở một nơi được quy định để magento có thể hiểu và response một route tương ứng. Một route trong Magento2 là một URL tiêu chuẩn bao gồm 3 phần: frontName controllerName actionName Chúng ta sẽ đi vào tìm hiểu magento sẽ dựa vào 3 phần này của route như thế nào để tương ứng với một file nhất định. Các bước để tạo một new page: Tạo một module mới. Tạo file routes.xml Tạo file controller (action) Chúng ta hãy cùng đi vào cụ thể từng bước nhé. :D 2. Tạo một module mới Để tạo một module, bạn cần làm theo các bước sau: Tạo một folder cho module. Tạo file etc/module.xml Tạo file registration.php Chạy lệnh bin/magento setup:upgrade Thực hành luôn, chúng ta sẽ tạo một thư mực module tên là Learning_HelloPage 123$ cd &lt;magento2_root&gt;/app/code$ mkdir Learning$ mkdir Learning/HelloPage Tạo file registration.php 123456&lt;?php /*** Copyright © 2016 Magento. All rights reserved. * See COPYING.txt for license details.*/\\Magento\\Framework\\Component\\ComponentRegistrar::register( \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE, &#x27;Learning_HelloPage&#x27;,__DIR__); Tạo file module.xml 12345678910&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!--/*** Copyright © 2016 Magento. All rights reserved. * See COPYING.txt for license details.*/--&gt;&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Module/etc/module.xsd&quot;&gt; &lt;module name=&quot;Learning_HelloPage&quot; setup_version=&quot;0.0.1&quot;&gt; &lt;/module&gt;&lt;/config&gt; Như vậy là chúng ta đã tạo xong một module mới. Về Quy tắc đặt tên, cấu trúc thư mục, ý nghĩa của các file registration.php, module.xml mình sẽ trình bày cụ thể trong bài viết tiếp theo. 3. Tạo file routes.xml Trước khi đi vào tạo file routes.xml, chúng ta hãy cùng tìm hiểu xem một route hoạt động thế nào trong magento2 nhé. Magento có các area, chẳng hạn như admin - liên quan đến việc hiện thị bên trang admin, frontend liên quan đến việc hiện thị giao diện phía người dùng. Mỗi một area sẽ có một file routes.xml được merge từ các file etc/area/routes.xml từ tất cả các module. File route.xml sẽ chứa tất cả các thông tin về route đựợc đăng kí và frontName. Lưu ý rằng frontName sẽ là phần đầu của một route. Để dễ hiểu hơn chúng ta hãy đi vào thực hành nhé. Bởi vì chúng ta đang tạo một page return về JSON cho user, tức là đang trong frontend area. Do đó chúng ta sẽ tạo một file ect/frontend/routes.xml cho module Learning_HelloPage 12345678910111213&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!--/*** Copyright © 2016 Magento. All rights reserved. * See COPYING.txt for license details.*/--&gt;&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:App/etc/routes.xsd&quot;&gt; &lt;router id=&quot;standard&quot;&gt; &lt;route id=&quot;learning&quot; frontName=&quot;test&quot;&gt; &lt;module name=&quot;Learning_HelloPage&quot; /&gt; &lt;/route&gt; &lt;/router&gt;&lt;/config&gt; Chúng ta vừa thêm một route tên là learning.Lưu ý là tên của route không nhất thiết phải trùng với tên của module. frontName mà chúng ta tạo lfa test. Thông thường tên route và frontName là giống nhau nhưng cũng không bắt buộc phải vậy. Khi magento xử lý một route test/chunk2/chunk3, magento sẽ kiểm tra liệu trong thư mục module Learning_HelloPage có thư mục Controller/Chunk2 hay không. Tiếp đến trong thư mục Chunk2 có action file Chunk3 hay không. Ở đây route của chúng ta sẽ là test/page/view. Chúng ta hãy cùng tạo file Controller để magento có thể hiểu và lấy làm file xử lý route này nhé. 4. Tạo file controller (file action) Như đã nó ở bên trên, với route test/page/view, Magento sẽ tìm đến thư mục Controller/Page, tiếp đó tìm đến file View.php Chúng ta thêm controller như sau: 123$ cd &lt;magento2_root&gt;/app/code/Learning/HelloPage$ mkdir Controller$ mkdir Controller/Page Tạo action file Controller/Page/View.php: 12345678910111213141516171819202122232425262728293031323334&lt;?php /** * Copyright © 2016 Magento. All rights reserved. * See COPYING.txt for license details. */namespace Learning\\HelloPage\\Controller\\Page;class View extends \\Magento\\Framework\\App\\Action\\Action&#123; /** * @var \\Magento\\Framework\\Controller\\Result\\JsonFactory */ protected $resultJsonFactory; /** * @param \\Magento\\Framework\\App\\Action\\Context $context * @param \\Magento\\Framework\\Controller\\Result\\JsonFactory $resultJsonFactory */ public function __construct( \\Magento\\Framework\\App\\Action\\Context $context, \\Magento\\Framework\\Controller\\Result\\JsonFactory $resultJsonFactory)&#123; $this-&gt;resultJsonFactory = $resultJsonFactory; parent::__construct($context);&#125; /** * View page action * * @return \\Magento\\Framework\\Controller\\ResultInterface */ public function execute() &#123; $result = $this-&gt;resultJsonFactory-&gt;create(); $data = [&#x27;message&#x27; =&gt; &#x27;Hello world!&#x27;];return $result-&gt;setData($data);&#125; &#125; Việc còn lại là active module và page của chúng ta bằng cách chạy câu lệnh Magento setup uprade 12$ cd &lt;magento2_root&gt;$ php bin/magento setup:upgrade Đến đây chúng ta có thể test page của chúng ta bằng cách gõ đường link /test/page/view. Chúng ta sẽ nhìn thấy message hiện lên trên trang 1&#123;&quot;message&quot;:&quot;Hello world!&quot;&#125; Ở bài viết này chủ yếu đi vào cách tạo một page mới nên chúng ta xây dựng một trang trả về một ResultJson. Ngoài ra magento2 có rất nhiều kiểu Result Object cho các trừờng hợp khác như ResultPage, Forward Result… 5. Tổng kết. Bài viết là một bài cơ bản, đơn giản về cách tạo một page trong Magento2. Mong bài viết sẽ hữu ích cho các bạn beginner bắt đầu mày mò nghiên cứu về magento. Mình cũng mới dấn thân vào con đường Magento nên mong các bạn góp ý cho bài viết và hãy cùng mình học tập tìm hiểu về magento trong những bài viết tiếp theo nhé. see ya! Bài viết tham khảo https://devdocs.magento.com/videos/fundamentals/create-a-new-page/","categories":[{"name":"Magento","slug":"Magento","permalink":"https://huongvnq.github.io/categories/Magento/"}],"tags":[{"name":"magento basic","slug":"magento-basic","permalink":"https://huongvnq.github.io/tags/magento-basic/"}]}],"categories":[{"name":"Magento","slug":"Magento","permalink":"https://huongvnq.github.io/categories/Magento/"}],"tags":[{"name":"magento basic","slug":"magento-basic","permalink":"https://huongvnq.github.io/tags/magento-basic/"}]}